{"version":3,"sources":["reportWebVitals.js","index.js","firebase.js","App.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","App","app","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","usersRef","collection","useState","people","setPeople","isError","updateError","show","hideModal","currentName","changeName","titles","changeTitles","updateFirebase","data","username","q","query","where","getDocs","querySnapshot","userExists","forEach","doc","newPeople","map","pd","classRef","sch","getDoc","docSnap","exists","newValue","value","push","name","updateDoc","setDoc","userDocRef","val","setTimeout","encrypt","secret","nacl","require","encodeBase64","nonce","randomBytes","secretKey","Buffer","from","secretData","encrypted","secretbox","fetchData","event","preventDefault","target","password","username_encrypted","password_encrypted","fetch","res","status","reset","json","school","bg","variant","Brand","Link","size","backdrop","keyboard","centered","Header","Title","style","margin","className","Body","onSubmit","Group","Label","Control","type","placeholder","isInvalid","Text","id","width","Footer","length","e","toString","Item"],"mappings":"gMAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACT,GAEJ,E,gBCFYQ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,OAOJf,G,kCClBA,oBAmBMgB,EAAMC,YAXW,CACrBC,OAAQC,0CACRC,WAAYD,uCACZE,UAAWF,uBACXG,cAAeH,mCACfI,kBAAmBJ,eACnBK,MAAOL,4CACPM,cAAeN,iBAKXO,EAAKC,YAAaX,GAETU,K,iMCVTE,EAAWC,YAAWH,IAAI,SAmNjBX,IAjNH,WAEV,MAA4Be,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA+BF,oBAAS,GAAxC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA0BJ,oBAAS,GAAnC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAAkCN,mBAAS,IAA3C,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAA+BR,mBAAS,CAAC,EAAK,WAAY,EAAK,WAAY,EAAK,WAAY,EAAK,WAAY,EAAK,WAAY,EAAK,WAAY,EAAK,WAAY,EAAK,aAArK,mBAAOS,EAAP,KAAeC,EAAf,KAEMC,EAAc,iDAAG,WAAOC,EAAMC,GAAb,gGAGfC,EAAIC,YAAMjB,EAAUkB,YAAMH,EAAU,MAAM,IAH3B,SAIOI,YAAQH,GAJf,UAIfI,EAJe,OAKjBC,GAAa,EAEjBD,EAAcE,SAAQ,SAACC,GACrBF,GAAa,CACd,IAEKG,EAAY,GAEbH,EAbgB,uBAcnB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAKI,IAAlC,iDAAsC,WAAOC,GAAP,4FAC9BC,EAAWJ,YAAIzB,IAAI,UAAWgB,EAAKc,IAAIF,IADT,SAEdG,YAAOF,GAFO,YAE9BG,EAF8B,QAIxBC,SAJwB,wBAM5BC,EAAWF,EAAQhB,OAAOmB,OACvBC,KAAKpB,EAAKqB,MAPe,SAQ5BC,YAAUT,EAAU,CACxBM,MAAOD,IATyB,OAWlCR,EAAUU,KAAKF,GAXmB,yCAe5BK,YAAOd,YAAIzB,IAAI,UAAWgB,EAAKc,IAAIF,IAAM,CAC7CO,MAAO,CAACnB,EAAKqB,QAhBmB,QAkBlCX,EAAUU,KAAK,CAACpB,EAAKqB,OAlBa,4CAAtC,uDAuBMG,EAAcf,YAAIzB,IAAI,QAAS,wBArClB,UAsCbsC,YAAUE,EAAD,eACZvB,GAAW,IAvCK,gCA4CnB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAKU,IAAlC,iDAAsC,WAAOC,GAAP,4FAC9BC,EAAWJ,YAAIzB,IAAI,UAAWgB,EAAKc,IAAIF,IADT,SAEdG,YAAOF,GAFO,OAE9BG,EAF8B,OAI9BS,EAAMT,EAAQhB,OAAOmB,MAC3BT,EAAUU,KAAKK,GALqB,2CAAtC,uDA5CmB,QAsDrB7B,EAAWI,EAAKqB,MAChBvB,EAAaE,EAAKH,QAClB6B,YAAW,kBAAIpC,EAAUoB,EAAd,GAA0B,KAxDhB,4CAAH,wDA2DdiB,EAAU,SAACC,GACf,IAAMC,EAAOC,EAAQ,KAEfC,EADQD,EAAQ,KACKC,aAErBC,EAAQH,EAAKI,YAAY,IAGzBC,EAAYC,EAAOC,KADH3D,mCACuB,QAEvC4D,EAAaF,EAAOC,KAAKR,EAAQ,QACjCU,EAAYT,EAAKU,UAAUF,EAAYL,EAAOE,GAGpD,MADY,UAAMH,EAAaC,GAAnB,YAA6BD,EAAaO,GAEvD,EAEKE,EAAS,iDAAG,WAAOC,GAAP,uFAEhBA,EAAMC,iBACAzC,EAAWwC,EAAME,OAAO,GAAGxB,MAC3ByB,EAAWH,EAAME,OAAO,GAAGxB,MAE3B0B,EAAqBlB,EAAQ1B,GAC7B6C,EAAqBnB,EAAQiB,GAEnCG,MAAM,qBAAqBF,EAAmB,aAAaC,GAAoBrF,MAC7E,SAAAuF,GAEE,GAAmB,MAAfA,EAAIC,OAGN,MAFAR,EAAME,OAAOO,QACb1D,GAAY,GACN,gBAGR,OAAOwD,EAAIG,MACZ,IACD1F,KAXF,iDAYE,WAAOuC,GAAP,8EACsB,0BAAhBA,EAAKoD,OADX,gCAEUrD,EAAeC,EAAMC,GAF/B,OAGIP,GAAU,GAHd,sBAKIF,GAAY,GALhB,2CAZF,uDATgB,2CAAH,sDAgCf,OACE,gCACE,cAAC,IAAD,CAAQ6D,GAAG,OAAOC,QAAQ,OAA1B,SACE,eAAC,IAAD,WACE,cAAC,IAAOC,MAAR,0CAEA,cAAC,IAAD,UACE,cAAC,IAAIC,KAAL,UAAyB,IAAd7D,GAAmB,8BAAMA,aAK1C,eAAC,IAAD,CACEF,KAAMA,EACNgE,KAAK,KACLC,SAAS,SACTC,UAAU,EACVC,UAAQ,EALV,UAOE,cAAC,IAAMC,OAAP,UACE,eAAC,IAAMC,MAAP,CAAaC,MAAO,CAACC,OAAQ,QAA7B,mDAA4E,uBAA5E,IAAmF,mBAAGC,UAAU,QAAb,4BAAnF,SAEF,cAAC,IAAMC,KAAP,UAEM,eAAC,IAAD,CAAMC,SAAU3B,EAAhB,UAEGjD,GAAW,mBAAG0E,UAAU,QAAb,2CAEV,eAAC,IAAKG,MAAN,CAAYH,UAAU,OAAtB,UACI,eAAC,IAAKI,MAAN,eAAa,yCAAb,OACA,eAAC,IAAD,WACI,cAAC,IAAKC,QAAN,CACAC,KAAK,WACLC,YAAY,iBACZC,UAAYlF,IACZ,cAAC,IAAWmF,KAAZ,CAAiBC,GAAG,eAApB,4BAEJ,uBACA,eAAC,IAAKN,MAAN,eAAa,yCAAb,OACA,cAAC,IAAD,UACI,cAAC,IAAKC,QAAN,CACAC,KAAK,WACLC,YAAY,iBACZC,UAAYlF,SAKpB,cAAC,IAAD,CAAQ0E,UAAU,cAAcX,QAAQ,UAAUiB,KAAK,SAASd,KAAK,KAAKM,MAAO,CAACa,MAAM,QAAxF,oBAIA,cAAC,IAAMC,OAAP,UACE,sBAAKZ,UAAU,SAAf,UACI,sBAAKA,UAAU,UAAf,UACE,cAAC,IAAD,CAAmBA,UAAU,QAAQR,KAAM,KAC3C,sDAEF,sBAAKQ,UAAU,UAAf,UACE,cAAC,IAAD,CAAmBA,UAAU,QAAQR,KAAM,KAC3C,oEAKR,yBAAQQ,UAAU,SAAlB,8DAA4E,uBAA5E,kEAOZ,qBAAKA,UAAU,UAAf,SACqB,IAAlB5E,EAAOyF,QACNzF,EAAOsB,KAAI,SAACC,EAAImE,GACd,OACE,eAAC,IAAD,CAAoBd,UAAU,KAA9B,UACE,8BAAMc,GAAGA,EAAE,EAAI,EAAI,IAAIC,WAAa,KAAOnF,GAAQkF,GAAGA,EAAE,EAAI,EAAI,IAAIC,cACnEpE,EAAGD,KAAI,SAACU,GAAU,OACjB,mCAAE,cAAC,IAAU4D,KAAX,UAA6B5D,GAART,EAAG,KAC3B,MAJaA,EAOnB,QAQV,C","file":"static/js/main.50ca7676.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//import bootstrap css\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getFirestore } from 'firebase/firestore'\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n// Your web app's Firebase configuration\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_apiKey,\r\n  authDomain: process.env.REACT_APP_authDomain,\r\n  projectId: process.env.REACT_APP_projectId,\r\n  storageBucket: process.env.REACT_APP_storageBucket,\r\n  messagingSenderId: process.env.REACT_APP_messagingSenderId,\r\n  appId: process.env.REACT_APP_appId,\r\n  measurementId: process.env.REACT_APP_measurementId\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app)\r\n\r\nexport default db","import React, { useState } from 'react'\nimport './App.css'\n\nimport { Navbar, Container, Nav, } from 'react-bootstrap';\nimport { Modal } from 'react-bootstrap'\nimport { InputGroup, Button, Form, ListGroup } from 'react-bootstrap';\n\nimport db from './firebase.js';\nimport { getDocs, query, collection, doc, where, updateDoc, getDoc, setDoc } from 'firebase/firestore'\n\nimport { AiFillCheckCircle } from 'react-icons/ai';\n\nconst usersRef = collection(db, \"users\")\n\nconst App = () => {\n\n  const [people, setPeople] = useState([])\n  const [isError, updateError] = useState(false)\n  const [show, hideModal] = useState(true)\n  const [currentName, changeName] = useState(\"\");\n  const [titles, changeTitles] = useState({\"1\": \"Period 1\", \"2\": \"Period 2\", \"3\": \"Period 3\", \"4\": \"Period 4\", \"6\": \"Period 6\", \"7\": \"Period 7\", \"8\": \"Period 8\", \"9\": \"Period 9\",})\n\n  const updateFirebase = async (data, username) => {\n\n    //check if user is already registered\\\n    const q = query(usersRef, where(username, \"==\", true));\n    const querySnapshot = await getDocs(q);\n    var userExists = false;\n\n    querySnapshot.forEach((doc) => {\n      userExists = true;\n    });\n\n    const newPeople = []\n\n    if (!userExists) {\n      [\"1\",\"2\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\"].map(async (pd) => {\n        const classRef = doc(db, \"classes\", data.sch[pd]);\n        const docSnap = await getDoc(classRef);\n\n        if (docSnap.exists()) {\n\n          const newValue = docSnap.data().value\n          newValue.push(data.name)\n          await updateDoc(classRef, {\n            value: newValue\n          })\n          newPeople.push(newValue)\n\n        } else {\n\n          await setDoc(doc(db, \"classes\", data.sch[pd]), {\n            value: [data.name]\n          });\n          newPeople.push([data.name])\n\n        }\n      })\n\n      const userDocRef =  doc(db, \"users\", \"seXBtOXYlyIT8oJRq6Lq\");\n      await updateDoc(userDocRef, {\n        [username]: true\n      });\n\n    } else {\n\n      [\"1\",\"2\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\"].map(async (pd) => {\n        const classRef = doc(db, \"classes\", data.sch[pd]);\n        const docSnap = await getDoc(classRef);\n\n        const val = docSnap.data().value\n        newPeople.push(val)\n\n      })\n\n    }\n    changeName(data.name)\n    changeTitles(data.titles)\n    setTimeout(()=>setPeople(newPeople), 1000)\n  }\n\n  const encrypt = (secret) => {\n    const nacl = require('tweetnacl')\n    const utils = require('tweetnacl-util')\n    const encodeBase64 = utils.encodeBase64\n    // Our nonce must be a 24 bytes Buffer (or Uint8Array)\n    const nonce = nacl.randomBytes(24)\n    // Our secret key must be a 32 bytes Buffer (or Uint8Array)\n    const encryptionKey = process.env.REACT_APP_encryptionKey\n    const secretKey = Buffer.from(encryptionKey, 'utf8')\n    // Make sure your data is also a Buffer of Uint8Array\n    const secretData = Buffer.from(secret, 'utf8')\n    const encrypted = nacl.secretbox(secretData, nonce, secretKey)\n    // We can now store our encrypted result and our nonce somewhere\n    const result = `${encodeBase64(nonce)}:${encodeBase64(encrypted)}`\n    return result\n  };\n\n  const fetchData = async (event) => {\n\n    event.preventDefault();\n    const username = event.target[0].value;\n    const password = event.target[1].value;\n\n    const username_encrypted = encrypt(username)\n    const password_encrypted = encrypt(password)\n\n    fetch(\"/getData?username=\"+username_encrypted+\"&password=\"+password_encrypted).then(\n      res => {\n\n        if (res.status === 500) {\n          event.target.reset()\n          updateError(true);\n          throw \"Invalid Login\"\n        }\n\n        return res.json();\n      }\n    ).then(\n      async (data) => {\n        if (data.school === \"Montgomery Blair High\") {\n          await updateFirebase(data, username)\n          hideModal(false)\n        } else {\n          updateError(true)\n        }    \n      }\n    )\n  }\n\n  return (\n    <div>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Container>\n          <Navbar.Brand>Montgomery Blair Scheduler </Navbar.Brand>\n          \n          <Nav>\n            <Nav.Link>{currentName!==0 && <div>{currentName}</div>}</Nav.Link>\n          </Nav>\n        </Container>\n      </Navbar>\n\n      <Modal\n        show={show}\n        size=\"lg\"\n        backdrop=\"static\"\n        keyboard={false}\n        centered\n      >\n        <Modal.Header>\n          <Modal.Title style={{margin: \"auto\"}}>Montgomery Blair HS Scheduler Sign In <br /> <p className=\"label\">by Dhruva Arun</p> </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n\n              <Form onSubmit={fetchData}>\n\n                {isError && <p className=\"error\">Invalid Username or Password!</p>}\n\n                  <Form.Group className=\"mb-4\">\n                      <Form.Label> <b>Username</b> </Form.Label>\n                      <InputGroup> \n                          <Form.Control \n                          type=\"username\"\n                          placeholder=\"Enter Username\"\n                          isInvalid={ isError } />\n                          <InputGroup.Text id=\"basic-addon1\">@mcpsmd.net</InputGroup.Text>\n                      </InputGroup>\n                      <br />\n                      <Form.Label> <b>Password</b> </Form.Label>\n                      <InputGroup> \n                          <Form.Control \n                          type=\"password\" \n                          placeholder=\"Enter Password\"\n                          isInvalid={ isError } />\n                      </InputGroup>\n                          \n                  </Form.Group>\n                  \n                  <Button className=\"modalSubmit\" variant=\"primary\" type=\"submit\" size=\"lg\" style={{width:\"100%\"}}>\n                      Submit\n                  </Button>\n\n                  <Modal.Footer>\n                    <div className=\"safety\">\n                        <div className=\"segment\">\n                          <AiFillCheckCircle className=\"check\" size={90}/>\n                          <p>All Data Encrypted</p>\n                        </div>\n                        <div className=\"segment\">\n                          <AiFillCheckCircle className=\"check\" size={90}/>\n                          <p>No Login Information Stored</p>\n                        </div>\n                    </div>\n                  </Modal.Footer>\n\n                  <footer className=\"footer\">Compare Your Schedule with Other Blair Students! <br></br> Contact QuickMathzs#0600 on Discord to Report Bugs </footer>\n\n              </Form>\n\n        </Modal.Body>\n      </Modal>\n\n      <div className=\"periods\">\n        {people.length !== 0 && (\n          people.map((pd, e)=> {\n            return(\n              <ListGroup key={pd} className=\"pd\">\n                <h4>{(e+(e>3 ? 2 : 1)).toString() + \": \" + titles[(e+(e>3 ? 2 : 1)).toString()]}</h4>\n                {pd.map((name) => {return(\n                  <><ListGroup.Item key={pd+10}>{name}</ListGroup.Item></>)\n                })}\n              </ListGroup>\n            )\n          })\n        )}\n      </div>\n      \n\n\n    </div>\n  )\n}\n\nexport default App\n"],"sourceRoot":""}